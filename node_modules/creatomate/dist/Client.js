"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const axios_1 = __importDefault(require("axios"));
const perf_hooks_1 = require("perf_hooks");
const Source_1 = require("./Source");
const CreatomateError_1 = require("./CreatomateError");
const utility_1 = require("./utility");
const CLIENT_VERSION = '1.0.5';
class Client {
    constructor(apiKey) {
        this.apiKey = apiKey;
        this.httpClient = axios_1.default.create({
            baseURL: 'https://api.creatomate.com/v1',
            responseType: 'json',
        });
    }
    /**
     * Starts a new render and awaits its completion.
     * @param options Render options.
     * @param timeout Maximum time in seconds to wait for the render to complete. If the render is not finished within the
     *    specified time, a 'TimeoutError' is thrown.
     */
    render(options, timeout = 900) {
        return __awaiter(this, void 0, void 0, function* () {
            const renders = yield this.startRender(options);
            const startTime = perf_hooks_1.performance.now();
            let unfinishedRenders = [...renders];
            const finishedRenders = [];
            const queue = [];
            yield new Promise((resolve, reject) => {
                const pollStatus = () => __awaiter(this, void 0, void 0, function* () {
                    if (queue.length === 0) {
                        queue.push(...unfinishedRenders);
                    }
                    const render = queue.pop();
                    if (!render) {
                        resolve();
                        return;
                    }
                    try {
                        const updatedRender = yield this.fetchRender(render.id);
                        if (updatedRender.status !== 'planned' && updatedRender.status !== 'rendering') {
                            unfinishedRenders = unfinishedRenders.filter(({ id }) => id !== render.id);
                            finishedRenders.push(updatedRender);
                        }
                    }
                    catch (error) {
                        reject(error);
                        return;
                    }
                    if (unfinishedRenders.length === 0) {
                        resolve();
                        return;
                    }
                    if (perf_hooks_1.performance.now() - startTime >= timeout * 1000) {
                        reject(new CreatomateError_1.TimeoutError());
                        return;
                    }
                    setTimeout(pollStatus, 2000);
                });
                setTimeout(pollStatus, 2000);
            });
            return finishedRenders;
        });
    }
    /**
     * Starts a render, but doesn't wait for it to finish.
     * @param options Render options.
     */
    startRender(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.httpRequest('POST', '/renders', Object.assign(Object.assign({}, (0, utility_1.transformObjectKeys)(utility_1.transformCamelToSnakeCase, options)), (options.source
                ? {
                    source: options.source instanceof Source_1.Source ? options.source.toMap() : options.source,
                }
                : {})));
            return response.data;
        });
    }
    /**
     * Fetches the status of the render.
     * @param id The ID of the render.
     */
    fetchRender(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = yield this.httpRequest('GET', `/renders/${id}`);
            return (0, utility_1.transformObjectKeys)(utility_1.transformSnakeToCamelCase, data);
        });
    }
    httpRequest(method, path, body) {
        const headers = {
            Authorization: `Bearer ${this.apiKey}`,
            'User-Agent': `Creatomate-Node/${CLIENT_VERSION}`,
        };
        return this.httpClient
            .request({
            method,
            url: path,
            data: body,
            headers,
        })
            .catch((error) => {
            return Promise.reject(this.transformError(error));
        });
    }
    transformError(error) {
        var _a, _b, _c, _d;
        if (!error.response) {
            return new CreatomateError_1.ConnectionError();
        }
        else if (error.response.status === 400) {
            return new CreatomateError_1.BadRequestError((_b = (_a = error.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.hint);
        }
        else if (error.response.status === 401) {
            return new CreatomateError_1.InvalidApiKeyError();
        }
        else if (error.response.status === 402) {
            return new CreatomateError_1.InsufficientCreditsError();
        }
        else if (error.response.status === 429) {
            return new CreatomateError_1.RateLimitExceededError();
        }
        else {
            return new CreatomateError_1.CreatomateError((_d = (_c = error.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.hint);
        }
    }
}
exports.Client = Client;
