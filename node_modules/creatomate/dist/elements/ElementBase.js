"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementBase = void 0;
const utility_1 = require("../utility");
class ElementBase {
    constructor(properties) {
        this.properties = properties;
    }
    toMap() {
        const _a = this.properties, { transition, enter, exit, animations } = _a, rest = __rest(_a, ["transition", "enter", "exit", "animations"]);
        const animationsMapped = Array.isArray(animations)
            ? [
                ...animations
                    .filter((animation) => typeof (animation === null || animation === void 0 ? void 0 : animation.toMap) === 'function')
                    .map((animation) => animation.toMap()),
            ]
            : [];
        if (transition) {
            animationsMapped.unshift(Object.assign(Object.assign({}, transition.toMap()), { time: 'start', transition: true }));
        }
        if (enter) {
            animationsMapped.unshift(Object.assign(Object.assign({}, enter.toMap()), { time: 'start' }));
        }
        if (exit) {
            animationsMapped.push(Object.assign(Object.assign({}, exit.toMap()), { time: 'end', reversed: true }));
        }
        return (0, utility_1.transformObjectKeys)(utility_1.transformCamelToSnakeCase, Object.assign(Object.assign({ type: this.type }, (0, utility_1.expandProperties)(rest)), (animationsMapped.length > 0 ? { animations: animationsMapped } : {})));
    }
}
exports.ElementBase = ElementBase;
