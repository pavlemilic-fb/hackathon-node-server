"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fill = void 0;
class Fill {
    constructor(mode, x0, y0, x1, y1, radius, colorStops) {
        this.mode = mode;
        this.x0 = x0;
        this.y0 = y0;
        this.x1 = x1;
        this.y1 = y1;
        this.radius = radius;
        this.colorStops = colorStops;
    }
    static solid(color) {
        return new Fill('solid', undefined, undefined, undefined, undefined, undefined, [color]);
    }
    static linear(x0, y0, x1, y1, colorStops) {
        return new Fill('linear', x0, y0, x1, y1, undefined, colorStops);
    }
    static horizontal(colorStops) {
        return new Fill('linear', '0%', '50%', '100%', '50%', undefined, colorStops);
    }
    static vertical(colorStops) {
        return new Fill('linear', '50%', '0%', '50%', '100%', undefined, colorStops);
    }
    static radial(x, y, radius, colorStops) {
        return new Fill('radial', x, y, undefined, undefined, radius, colorStops);
    }
    toMap() {
        let colorStops = [];
        if (Array.isArray(this.colorStops) && this.colorStops.length >= 1) {
            if (typeof this.colorStops[0] === 'string') {
                if (this.colorStops.length > 1) {
                    for (let i = 0; i < this.colorStops.length; i++) {
                        colorStops.push({
                            offset: `${(i / (this.colorStops.length - 1)) * 100}%`,
                            color: this.colorStops[i].toString(),
                        });
                    }
                }
                else {
                    colorStops.push({ offset: '0%', color: this.colorStops[0] });
                }
            }
            else {
                colorStops = this.colorStops;
            }
        }
        if (this.mode === 'solid') {
            return {
                fill_color: colorStops.length > 0 ? colorStops[0].color : undefined,
            };
        }
        else if (this.mode === 'linear') {
            return {
                fill_color: colorStops,
                fill_mode: this.mode,
                fill_x0: this.x0,
                fill_y0: this.y0,
                fill_x1: this.x1,
                fill_y1: this.y1,
            };
        }
        else {
            return {
                fill_color: colorStops,
                fill_mode: this.mode,
                fill_x0: this.x0,
                fill_y0: this.y0,
                radius: this.radius,
            };
        }
    }
}
exports.Fill = Fill;
