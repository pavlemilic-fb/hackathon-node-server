import { Render } from './Render';
import { RenderOptions } from './RenderOptions';
export declare class Client {
    private readonly apiKey;
    private readonly httpClient;
    constructor(apiKey: string);
    /**
     * Starts a new render and awaits its completion.
     * @param options Render options.
     * @param timeout Maximum time in seconds to wait for the render to complete. If the render is not finished within the
     *    specified time, a 'TimeoutError' is thrown.
     */
    render(options: RenderOptions, timeout?: number): Promise<Render[]>;
    /**
     * Starts a render, but doesn't wait for it to finish.
     * @param options Render options.
     */
    startRender(options: RenderOptions): Promise<Render[]>;
    /**
     * Fetches the status of the render.
     * @param id The ID of the render.
     */
    fetchRender(id: string): Promise<Render>;
    private httpRequest;
    private transformError;
}
