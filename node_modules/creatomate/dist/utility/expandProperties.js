"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expandProperties = void 0;
const properties_1 = require("../properties");
function expandProperties(properties) {
    var _a;
    const expandedProperties = {};
    for (const key of Object.keys(properties)) {
        const value = properties[key];
        // Detect whether the value is an array a keyframes or not
        if (Array.isArray(value) && value[0] instanceof properties_1.Keyframe) {
            for (const keyframe of value) {
                // Expand each keyframe
                if (keyframe instanceof properties_1.Keyframe) {
                    // Expand combined property to separate values
                    if (typeof ((_a = keyframe.value) === null || _a === void 0 ? void 0 : _a.toMap) === 'function') {
                        const nestedProperties = keyframe.value.toMap();
                        for (const nestedKey of Object.keys(nestedProperties)) {
                            if (!Array.isArray(expandedProperties[nestedKey])) {
                                expandedProperties[nestedKey] = [];
                            }
                            expandedProperties[nestedKey].push({
                                time: keyframe.time,
                                easing: keyframe.easing,
                                value: nestedProperties[nestedKey],
                            });
                        }
                    }
                    else {
                        // Singular property
                        if (!Array.isArray(expandedProperties[key])) {
                            expandedProperties[key] = [];
                        }
                        expandedProperties[key].push({
                            time: keyframe.time,
                            easing: keyframe.easing,
                            value: keyframe.value,
                        });
                    }
                }
            }
        }
        else if (typeof (value === null || value === void 0 ? void 0 : value.toMap) === 'function') {
            // Expand combined property to separate values
            const nestedProperties = value.toMap();
            for (const nestedKey of Object.keys(nestedProperties)) {
                expandedProperties[nestedKey] = nestedProperties[nestedKey];
            }
        }
        else {
            expandedProperties[key] = properties[key];
        }
    }
    return expandedProperties;
}
exports.expandProperties = expandProperties;
